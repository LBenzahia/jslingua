{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"https://github.com/kariminf/jslingua.git","branch_name":"master","objects":[{"comment":"/**\n* Contains information about the specified language\n* @class Info\n* @param {string} langCode The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n*/","meta":{"filename":"info.js","lineno":12,"columnno":2,"path":"","code":{}},"description":"Contains information about the specified language","kind":"class","name":"Info","params":[{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.","name":"langCode"}],"longname":"Info","scope":"global"},{"comment":"/**\n* Get the name of the language\n* @method getName\n* @return {string}  the language name: arabic, english, japanese, etc.\n*/","meta":{"filename":"info.js","lineno":44,"columnno":2,"path":"","code":{}},"description":"Get the name of the language","kind":"function","name":"getName","returns":[{"type":{"names":["string"]},"description":"the language name: arabic, english, japanese, etc."}],"longname":"getName","scope":"global"},{"comment":"/**\n* Get the code of the language\n* @method getCode\n* @return {string}  The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n*/","meta":{"filename":"info.js","lineno":53,"columnno":2,"path":"","code":{}},"description":"Get the code of the language","kind":"function","name":"getCode","returns":[{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc."}],"longname":"getCode","scope":"global"},{"comment":"/**\n* Get the family of the language\n* @method getFamily\n* @return {string}  The language family: Afro-asiatic, Japonic, etc.\n*/","meta":{"filename":"info.js","lineno":62,"columnno":2,"path":"","code":{}},"description":"Get the family of the language","kind":"function","name":"getFamily","returns":[{"type":{"names":["string"]},"description":"The language family: Afro-asiatic, Japonic, etc."}],"longname":"getFamily","scope":"global"},{"comment":"/**\n* Get the branch of the language, if any\n* @method getBranch\n* @return {string}  The language branch: semitic, etc.\n*/","meta":{"filename":"info.js","lineno":71,"columnno":2,"path":"","code":{}},"description":"Get the branch of the language, if any","kind":"function","name":"getBranch","returns":[{"type":{"names":["string"]},"description":"The language branch: semitic, etc."}],"longname":"getBranch","scope":"global"},{"comment":"/**\n* Get the direction of writing of the language: ltr or rtl\n* @method getDir\n* @return {string}  The language direction: left to right (ltr) or right to left (rtl)\n*/","meta":{"filename":"info.js","lineno":80,"columnno":2,"path":"","code":{}},"description":"Get the direction of writing of the language: ltr or rtl","kind":"function","name":"getDir","returns":[{"type":{"names":["string"]},"description":"The language direction: left to right (ltr) or right to left (rtl)"}],"longname":"getDir","scope":"global"},{"comment":"/**\n* Get the words order:\n* <ul>\n* <li>s: Subject</li>\n* <li>v: Verb</li>\n* <li>o: Object</li>\n* </ul>\n* For example, English is \"svo\"\n* @method getWordOrder\n* @return {string}  The words order in the language\n*/","meta":{"filename":"info.js","lineno":89,"columnno":2,"path":"","code":{}},"description":"Get the words order:\n<ul>\n<li>s: Subject</li>\n<li>v: Verb</li>\n<li>o: Object</li>\n</ul>\nFor example, English is \"svo\"","kind":"function","name":"getWordOrder","returns":[{"type":{"names":["string"]},"description":"The words order in the language"}],"longname":"getWordOrder","scope":"global"},{"comment":"/**\n* The main module\n* @module JsLingua\n*/","meta":{"filename":"jslingua.js","lineno":1,"columnno":0,"path":"","code":{}},"description":"The main module","kind":"module","name":"JsLingua","longname":"module:JsLingua"},{"comment":"/**\n* The main class\n* @class JsLingua\n*/","meta":{"filename":"jslingua.js","lineno":17,"columnno":2,"path":"","code":{}},"description":"The main class","kind":"class","name":"JsLingua","longname":"module:JsLingua~JsLingua","scope":"inner","memberof":"module:JsLingua"},{"comment":"/**\n* Add a service for a specific language\n* @public\n* @static\n* @method addService\n* @param {string} serviceID The services name: \"Info\", \"Lang\", etc.\n* @param {string} langCode  The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n* @param {object} theClass  The class that affords the service\n*/","meta":{"filename":"jslingua.js","lineno":72,"columnno":2,"path":"","code":{}},"description":"Add a service for a specific language","access":"public","scope":"static","kind":"function","name":"addService","params":[{"type":{"names":["string"]},"description":"The services name: \"Info\", \"Lang\", etc.","name":"serviceID"},{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.","name":"langCode"},{"type":{"names":["object"]},"description":"The class that affords the service","name":"theClass"}],"longname":"module:JsLingua.addService","memberof":"module:JsLingua"},{"comment":"/**\n* Get the codes of available languages of a given service\n* @public\n* @static\n* @method serviceLanguages\n* @param  {string} serviceID The name of the service (the super-classe): \"Info\", \"Lang\", etc.\n* @return {array}   array of strings, with ISO639-2 codes\n*/","meta":{"filename":"jslingua.js","lineno":90,"columnno":2,"path":"","code":{}},"description":"Get the codes of available languages of a given service","access":"public","scope":"static","kind":"function","name":"serviceLanguages","params":[{"type":{"names":["string"]},"description":"The name of the service (the super-classe): \"Info\", \"Lang\", etc.","name":"serviceID"}],"returns":[{"type":{"names":["array"]},"description":"array of strings, with ISO639-2 codes"}],"longname":"module:JsLingua.serviceLanguages","memberof":"module:JsLingua"},{"comment":"/**\n* Get the service class for a given language and service name.<br>\n* For example: JsLingua.getService(\"Info\", \"ara\") Gives a class AraInfo\n* @public\n* @static\n* @method getService\n* @param  {string} serviceID The name of the service (the super-classe): \"Info\", \"Lang\", etc.\n* @param  {string} langCode  The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n* @return {object}   The class that affords the service\n*/","meta":{"filename":"jslingua.js","lineno":103,"columnno":2,"path":"","code":{}},"description":"Get the service class for a given language and service name.<br>\nFor example: JsLingua.getService(\"Info\", \"ara\") Gives a class AraInfo","access":"public","scope":"static","kind":"function","name":"getService","params":[{"type":{"names":["string"]},"description":"The name of the service (the super-classe): \"Info\", \"Lang\", etc.","name":"serviceID"},{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.","name":"langCode"}],"returns":[{"type":{"names":["object"]},"description":"The class that affords the service"}],"longname":"module:JsLingua.getService","memberof":"module:JsLingua"},{"comment":"/**\n* [getVersion description]\n* @public\n* @static\n* @method getVersion\n* @return {[type]}   [description]\n*/","meta":{"filename":"jslingua.js","lineno":119,"columnno":2,"path":"","code":{}},"description":"[getVersion description]","access":"public","scope":"static","kind":"function","name":"getVersion","returns":[{}],"longname":"module:JsLingua.getVersion","memberof":"module:JsLingua"},{"comment":"/**\n* To recover the direction of writing for the given language <br>\n* This can be done using the info.js instance of the target language.\n* But, the direction is used a lot for presentation, so a centralized\n* version is to be afforded, so we don't import the js file for each\n* language in each webpage.\n* @public\n* @static\n* @method getDir\n* @param  {string} langCode The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n* @return {String}     either \"rtl\" or \"ltr\"\n*/","meta":{"filename":"jslingua.js","lineno":130,"columnno":2,"path":"","code":{}},"description":"To recover the direction of writing for the given language <br>\nThis can be done using the info.js instance of the target language.\nBut, the direction is used a lot for presentation, so a centralized\nversion is to be afforded, so we don't import the js file for each\nlanguage in each webpage.","access":"public","scope":"static","kind":"function","name":"getDir","params":[{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.","name":"langCode"}],"returns":[{"type":{"names":["String"]},"description":"either \"rtl\" or \"ltr\""}],"longname":"module:JsLingua.getDir","memberof":"module:JsLingua"},{"comment":"/**\n* Returns unicode\n* @method getUnicode\n* @private\n* @param {String, Number} char a character or a unicode int\n* @return {Number} returns the same number or the unicode of the first character\n*/","meta":{"filename":"lang.js","lineno":12,"columnno":2,"path":"","code":{}},"description":"Returns unicode","kind":"function","name":"getUnicode","access":"private","params":[{}],"returns":[{"type":{"names":["Number"]},"description":"returns the same number or the unicode of the first character"}],"longname":"getUnicode","scope":"global"},{"comment":"/**\n* Returns another method to verify if a character's unicode is between\n* two unicode numbers min and max\n* @method isBetween\n* @private\n* @param  {number}  min minimum unicode (included)\n* @param  {number}  max maximum unicode (included)\n* @return {function}     function with char as parameter and returns a boolean\n*/","meta":{"filename":"lang.js","lineno":30,"columnno":1,"path":"","code":{}},"description":"Returns another method to verify if a character's unicode is between\ntwo unicode numbers min and max","kind":"function","name":"isBetween","access":"private","params":[{"type":{"names":["number"]},"description":"minimum unicode (included)","name":"min"},{"type":{"names":["number"]},"description":"maximum unicode (included)","name":"max"}],"returns":[{"type":{"names":["function"]},"description":"function with char as parameter and returns a boolean"}],"longname":"isBetween","scope":"global"},{"comment":"/**\n* Add char sets of a language\n* @method addCharSet\n* @static\n* @protected\n* @param  {string} setName CharSet name, for example: hiragana, kanji, Arabic suppliment\n* @param  {number} begin   integer value: begining of the charSet\n* @param  {number} end     integer value: end of the charSet\n*/","meta":{"filename":"lang.js","lineno":99,"columnno":2,"path":"","code":{}},"description":"Add char sets of a language","kind":"function","name":"addCharSet","scope":"static","access":"protected","params":[{"type":{"names":["string"]},"description":"CharSet name, for example: hiragana, kanji, Arabic suppliment","name":"setName"},{"type":{"names":["number"]},"description":"integer value: begining of the charSet","name":"begin"},{"type":{"names":["number"]},"description":"integer value: end of the charSet","name":"end"}],"longname":"addCharSet"},{"comment":"/**\n* Creates a new transformation method\n* @method addTransform\n* @static\n* @protected\n* @param {string} transName   transformation name (function name), for example: hiragana2Katakana\n* @param {number} offset      the number we add to the char's unicodes to get the new character\n* @param {string} origCharSet The name of the charset\n*/","meta":{"filename":"lang.js","lineno":112,"columnno":2,"path":"","code":{}},"description":"Creates a new transformation method","kind":"function","name":"addTransform","scope":"static","access":"protected","params":[{"type":{"names":["string"]},"description":"transformation name (function name), for example: hiragana2Katakana","name":"transName"},{"type":{"names":["number"]},"description":"the number we add to the char's unicodes to get the new character","name":"offset"},{"type":{"names":["string"]},"description":"The name of the charset","name":"origCharSet"}],"longname":"addTransform"},{"comment":"/**\n* Returns the available charsets for the current language\n* @method availableCharSets\n* @return {array} a set of strings containing the names of charsets\n*/","meta":{"filename":"lang.js","lineno":138,"columnno":2,"path":"","code":{}},"description":"Returns the available charsets for the current language","kind":"function","name":"availableCharSets","returns":[{"type":{"names":["array"]},"description":"a set of strings containing the names of charsets"}],"longname":"availableCharSets","scope":"global"},{"comment":"/**\n* Returns the available transformations for the current language\n* @method availableTransformations\n* @return {array} a set of strings containing the names of transformation functions\n*/","meta":{"filename":"lang.js","lineno":147,"columnno":2,"path":"","code":{}},"description":"Returns the available transformations for the current language","kind":"function","name":"availableTransformations","returns":[{"type":{"names":["array"]},"description":"a set of strings containing the names of transformation functions"}],"longname":"availableTransformations","scope":"global"},{"comment":"/**\n* Returns the transformation function\n* @method transformationFunction\n* @param  {string} transName transformation name (function name), for example: hiragana2Katakana\n* @return {function}  a function which takes a string and transforme it to another string with different charset\n*/","meta":{"filename":"lang.js","lineno":156,"columnno":2,"path":"","code":{}},"description":"Returns the transformation function","kind":"function","name":"transformationFunction","params":[{"type":{"names":["string"]},"description":"transformation name (function name), for example: hiragana2Katakana","name":"transName"}],"returns":[{"type":{"names":["function"]},"description":"a function which takes a string and transforme it to another string with different charset"}],"longname":"transformationFunction","scope":"global"},{"comment":"/**\n* Returns a function which verifies if a char belongs to a charset or not\n* @method verifyCharSetFunction\n* @param  {string} setName CharSet name, for example: hiragana, kanji, Arabic suppliment\n* @return {function}  A function which takes a char and returns true if it belongs to the charset\n*/","meta":{"filename":"lang.js","lineno":170,"columnno":2,"path":"","code":{}},"description":"Returns a function which verifies if a char belongs to a charset or not","kind":"function","name":"verifyCharSetFunction","params":[{"type":{"names":["string"]},"description":"CharSet name, for example: hiragana, kanji, Arabic suppliment","name":"setName"}],"returns":[{"type":{"names":["function"]},"description":"A function which takes a char and returns true if it belongs to the charset"}],"longname":"verifyCharSetFunction","scope":"global"},{"comment":"/**\n* Returns a function which verifies if a string contains at least one character which belongs to a charset\n* @method containsCharSetFunction\n* @param  {string} setName CharSet name, for example: hiragana, kanji, Arabic suppliment\n* @return {function}  A function which takes a string and returns true if one of its characters belongs to the charset\n*/","meta":{"filename":"lang.js","lineno":184,"columnno":2,"path":"","code":{}},"description":"Returns a function which verifies if a string contains at least one character which belongs to a charset","kind":"function","name":"containsCharSetFunction","params":[{"type":{"names":["string"]},"description":"CharSet name, for example: hiragana, kanji, Arabic suppliment","name":"setName"}],"returns":[{"type":{"names":["function"]},"description":"A function which takes a string and returns true if one of its characters belongs to the charset"}],"longname":"containsCharSetFunction","scope":"global"},{"comment":"/**\n* Returns a function which verifies if all string's characters belong to a charset\n* @method allCharSetFunction\n* @param  {string} setName CharSet name, for example: hiragana, kanji, Arabic suppliment\n* @return {function}  A function which takes a string and returns true if all of its characters belong to the charset\n*/","meta":{"filename":"lang.js","lineno":194,"columnno":2,"path":"","code":{}},"description":"Returns a function which verifies if all string's characters belong to a charset","kind":"function","name":"allCharSetFunction","params":[{"type":{"names":["string"]},"description":"CharSet name, for example: hiragana, kanji, Arabic suppliment","name":"setName"}],"returns":[{"type":{"names":["function"]},"description":"A function which takes a string and returns true if all of its characters belong to the charset"}],"longname":"allCharSetFunction","scope":"global"},{"comment":"/**\n* Returns the code of the language\n* @method getCode\n* @return {string}  The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc.\n*/","meta":{"filename":"lang.js","lineno":204,"columnno":2,"path":"","code":{}},"description":"Returns the code of the language","kind":"function","name":"getCode","returns":[{"type":{"names":["string"]},"description":"The language ISO639-2 code: \"ara\", \"jpn\", \"eng\", etc."}],"longname":"getCode","scope":"global"},{"comment":"/**\n* A function which returns the pronounciation of a number in the destination\n* language (this must be overriden)\n* @method pronounceNumber\n* @param  {number} num A number to be transformed into letters\n* @return {string}  the pronounciation\n*/","meta":{"filename":"lang.js","lineno":213,"columnno":2,"path":"","code":{}},"description":"A function which returns the pronounciation of a number in the destination\nlanguage (this must be overriden)","kind":"function","name":"pronounceNumber","params":[{"type":{"names":["number"]},"description":"A number to be transformed into letters","name":"num"}],"returns":[{"type":{"names":["string"]},"description":"the pronounciation"}],"longname":"pronounceNumber","scope":"global"},{"comment":"/**\n* A debugging function which do nothing\n* @method dummyDebug\n* @private\n*/","meta":{"filename":"morpho.js","lineno":30,"columnno":2,"path":"","code":{}},"description":"A debugging function which do nothing","kind":"function","name":"dummyDebug","access":"private","longname":"dummyDebug","scope":"global"},{"comment":"/**\n* A debugging function which pushes the arguments to the cosoles log\n* @method realDebug\n* @private\n*/","meta":{"filename":"morpho.js","lineno":37,"columnno":2,"path":"","code":{}},"description":"A debugging function which pushes the arguments to the cosoles log","kind":"function","name":"realDebug","access":"private","longname":"realDebug","scope":"global"},{"comment":"/**\n* Add new stemmer method\n* @method newStemmer\n* @protected\n* @static\n* @param  {string} stemmerName the name of the stemmer\n* @param  {string} stemmerDesc   the description of the stemmer\n* @param  {function} stemmerFct   the function stem(word)\n*/","meta":{"filename":"morpho.js","lineno":310,"columnno":2,"path":"","code":{}},"description":"Add new stemmer method","kind":"function","name":"newStemmer","access":"protected","scope":"static","params":[{"type":{"names":["string"]},"description":"the name of the stemmer","name":"stemmerName"},{"type":{"names":["string"]},"description":"the description of the stemmer","name":"stemmerDesc"},{"type":{"names":["function"]},"description":"the function stem(word)","name":"stemmerFct"}],"longname":"newStemmer"},{"comment":"/**\n* Enables the debugging messages\n* @method enableDebug\n*/","meta":{"filename":"morpho.js","lineno":332,"columnno":2,"path":"","code":{}},"description":"Enables the debugging messages","kind":"function","name":"enableDebug","longname":"enableDebug","scope":"global"},{"comment":"/**\n* disables the debugging messages\n* @method disableDebug\n*/","meta":{"filename":"morpho.js","lineno":340,"columnno":2,"path":"","code":{}},"description":"disables the debugging messages","kind":"function","name":"disableDebug","longname":"disableDebug","scope":"global"},{"comment":"/**\n* Sets the current stemmer\n*\n* @final\n* @method setCurrentStemmer\n* @param {string} StemmerName stemmer method's name\n*/","meta":{"filename":"morpho.js","lineno":348,"columnno":2,"path":"","code":{}},"description":"Sets the current stemmer","readonly":true,"kind":"function","name":"setCurrentStemmer","params":[{"type":{"names":["string"]},"description":"stemmer method's name","name":"StemmerName"}],"longname":"setCurrentStemmer","scope":"global"},{"comment":"/**\n* Returns the list of available stemming methods\n* @final\n* @method availableStemmers\n* @return {array}  Array of Strings containing stemmers names\n*/","meta":{"filename":"morpho.js","lineno":361,"columnno":2,"path":"","code":{}},"description":"Returns the list of available stemming methods","readonly":true,"kind":"function","name":"availableStemmers","returns":[{"type":{"names":["array"]},"description":"Array of Strings containing stemmers names"}],"longname":"availableStemmers","scope":"global"},{"comment":"/**\n* Returns a list of verb types\n* @abstract\n* @public\n* @method getVerbTypes\n* @return {Array}     [description]\n*/","meta":{"filename":"morpho.js","lineno":389,"columnno":2,"path":"","code":{}},"description":"Returns a list of verb types","virtual":true,"access":"public","kind":"function","name":"getVerbTypes","returns":[{"type":{"names":["Array"]},"description":"[description]"}],"longname":"getVerbTypes","scope":"global"},{"comment":"/**\n* Given a verb, it detects its type\n* @abstract\n* @public\n* @method getVerbType\n* @return {[type]}    [description]\n*/","meta":{"filename":"morpho.js","lineno":400,"columnno":2,"path":"","code":{}},"description":"Given a verb, it detects its type","virtual":true,"access":"public","kind":"function","name":"getVerbType","returns":[{}],"longname":"getVerbType","scope":"global"},{"comment":"/**\n* This function returns an object of available conjugation forms\n* ```\n* {\n*  \"form_name\": {opts}\n* }\n* ```\n* @public\n* @method getForms\n* @return {array}  Array of tenses available for the language\n*/","meta":{"filename":"morpho.js","lineno":411,"columnno":2,"path":"","code":{}},"description":"This function returns an object of available conjugation forms\n```\n{\n \"form_name\": {opts}\n}\n```","access":"public","kind":"function","name":"getForms","returns":[{"type":{"names":["array"]},"description":"Array of tenses available for the language"}],"longname":"getForms","scope":"global"},{"comment":"/**\n* Each language has a conjugation table model.\n* For example, in English, Arabic and French, we put pronouns in rows.\n* As for Japanese, the conjugation doesn't follow that pattern.\n* @method getConjugModel\n* @return {[type]}   [description]\n*/","meta":{"filename":"morpho.js","lineno":444,"columnno":2,"path":"","code":{}},"description":"Each language has a conjugation table model.\nFor example, in English, Arabic and French, we put pronouns in rows.\nAs for Japanese, the conjugation doesn't follow that pattern.","kind":"function","name":"getConjugModel","returns":[{}],"longname":"getConjugModel","scope":"global"},{"comment":"/**\n* [getOptLists description]\n* @method getOptLists\n* @param  {[type]}    optLabel [description]\n* @return {[type]}             [description]\n*/","meta":{"filename":"morpho.js","lineno":460,"columnno":2,"path":"","code":{}},"description":"[getOptLists description]","kind":"function","name":"getOptLists","params":[{}],"returns":[{}],"longname":"getOptLists","scope":"global"},{"comment":"/**\n* [getNegationOpts description]\n* @protected\n* @method getNegationOpts\n* @return {[type]}        [description]\n*/","meta":{"filename":"morpho.js","lineno":488,"columnno":2,"path":"","code":{}},"description":"[getNegationOpts description]","access":"protected","kind":"function","name":"getNegationOpts","returns":[{}],"longname":"getNegationOpts","scope":"global"},{"comment":"/**\n* [getNegationName description]\n* @protected\n* @method getNegationName\n* @param  {[type]}        opts [description]\n* @return {[type]}             [description]\n*/","meta":{"filename":"morpho.js","lineno":501,"columnno":2,"path":"","code":{}},"description":"[getNegationName description]","access":"protected","kind":"function","name":"getNegationName","params":[{}],"returns":[{}],"longname":"getNegationName","scope":"global"},{"comment":"/**\n* [getVoiceOpts description]\n* @protected\n* @method getVoiceOpts\n* @return {[type]}     [description]\n*/","meta":{"filename":"morpho.js","lineno":514,"columnno":2,"path":"","code":{}},"description":"[getVoiceOpts description]","access":"protected","kind":"function","name":"getVoiceOpts","returns":[{}],"longname":"getVoiceOpts","scope":"global"},{"comment":"/**\n* [getVoiceName description]\n* @protected\n* @method getVoiceName\n* @param  {[type]}     opts [description]\n* @return {[type]}          [description]\n*/","meta":{"filename":"morpho.js","lineno":527,"columnno":2,"path":"","code":{}},"description":"[getVoiceName description]","access":"protected","kind":"function","name":"getVoiceName","params":[{}],"returns":[{}],"longname":"getVoiceName","scope":"global"},{"comment":"/**\n* [getPronounOpts description]\n* @protected\n* @method getPronounOpts\n* @return {[type]}       [description]\n*/","meta":{"filename":"morpho.js","lineno":544,"columnno":2,"path":"","code":{}},"description":"[getPronounOpts description]","access":"protected","kind":"function","name":"getPronounOpts","returns":[{}],"longname":"getPronounOpts","scope":"global"},{"comment":"/**\n* [getPronounName description]\n* @protected\n* @method getPronounName\n* @param  {[type]}       opts [description]\n* @return {[type]}            [description]\n*/","meta":{"filename":"morpho.js","lineno":554,"columnno":2,"path":"","code":{}},"description":"[getPronounName description]","access":"protected","kind":"function","name":"getPronounName","params":[{}],"returns":[{}],"longname":"getPronounName","scope":"global"},{"comment":"/**\n* This function is used for verb conjugation\n* @method conjugate\n* @param  {string} verb the word to be conjugated\n* @param  {object} opts  options for tense, case, voice, aspect, person, number, gender, mood, and other\n* @return {string}      inflected word\n*/","meta":{"filename":"morpho.js","lineno":566,"columnno":2,"path":"","code":{}},"description":"This function is used for verb conjugation","kind":"function","name":"conjugate","params":[{"type":{"names":["string"]},"description":"the word to be conjugated","name":"verb"},{"type":{"names":["object"]},"description":"options for tense, case, voice, aspect, person, number, gender, mood, and other","name":"opts"}],"returns":[{"type":{"names":["string"]},"description":"inflected word"}],"longname":"conjugate","scope":"global"},{"comment":"/**\n* Get the personal pronoun using options like: person, gender, etc.<br>\n* for example, the parameters for the personal pronoun \"I\": <br>\n* ```\n*    {\n*      person: Morpho.Feature.Person.First,\n*      number: Morpho.Feature.Number.Singular\n*    }\n* ```\n* @method getPronounName\n* @param  {object} opts An object containing parameters: person, gender, number.\n* @return {string}      the pronoun\n*/","meta":{"filename":"morpho.js","lineno":579,"columnno":2,"path":"","code":{}},"description":"Get the personal pronoun using options like: person, gender, etc.<br>\nfor example, the parameters for the personal pronoun \"I\": <br>\n```\n   {\n     person: Morpho.Feature.Person.First,\n     number: Morpho.Feature.Number.Singular\n   }\n```","kind":"function","name":"getPronounName","params":[{"type":{"names":["object"]},"description":"An object containing parameters: person, gender, number.","name":"opts"}],"returns":[{"type":{"names":["string"]},"description":"the pronoun"}],"longname":"getPronounName","scope":"global"},{"comment":"/**\n* This function is used for noun inflexion<br>\n* For example: noun to plural nouns\n* @method declenseNoun\n* @param  {string} noun the noun to be inflected\n* @param  {object} opts  the options: number for example\n* @return {string}      the inflected noun\n*/","meta":{"filename":"morpho.js","lineno":596,"columnno":2,"path":"","code":{}},"description":"This function is used for noun inflexion<br>\nFor example: noun to plural nouns","kind":"function","name":"declenseNoun","params":[{"type":{"names":["string"]},"description":"the noun to be inflected","name":"noun"},{"type":{"names":["object"]},"description":"the options: number for example","name":"opts"}],"returns":[{"type":{"names":["string"]},"description":"the inflected noun"}],"longname":"declenseNoun","scope":"global"},{"comment":"/**\n* Stem a word: delete prefixes, suffixes and infixes\n* @method stem\n* @param  {string} word the word to be stemmed\n* @return {string}      stemmed word\n*/","meta":{"filename":"morpho.js","lineno":608,"columnno":2,"path":"","code":{}},"description":"Stem a word: delete prefixes, suffixes and infixes","kind":"function","name":"stem","params":[{"type":{"names":["string"]},"description":"the word to be stemmed","name":"word"}],"returns":[{"type":{"names":["string"]},"description":"stemmed word"}],"longname":"stem","scope":"global"},{"comment":"/**\n* Normalization method, used to delete non used chars or to replace some with others, etc.\n* @method normalize\n* @param  {string} word the word to be normalized\n* @param  {string} opts some options (optional) where each language defines its own\n* normalization options\n* @return {string}      normalized word\n*/","meta":{"filename":"morpho.js","lineno":621,"columnno":2,"path":"","code":{}},"description":"Normalization method, used to delete non used chars or to replace some with others, etc.","kind":"function","name":"normalize","params":[{"type":{"names":["string"]},"description":"the word to be normalized","name":"word"},{"type":{"names":["string"]},"description":"some options (optional) where each language defines its own\nnormalization options","name":"opts"}],"returns":[{"type":{"names":["string"]},"description":"normalized word"}],"longname":"normalize","scope":"global"},{"comment":"/**\n* [parseConjModelBranch description]\n* @private\n* @static\n* @method parseConjModelBranch\n* @param  {[type]}             morpho [description]\n* @param  {[type]}             branch [description]\n* @return {[type]}                    [description]\n*/","meta":{"filename":"morpho.js","lineno":637,"columnno":2,"path":"","code":{}},"description":"[parseConjModelBranch description]","access":"private","scope":"static","kind":"function","name":"parseConjModelBranch","params":[{},{}],"returns":[{}],"longname":"parseConjModelBranch"},{"comment":"/**\n* [parseConjModel description]\n* @static\n* @public\n* @method parseConjModel\n* @param  {[type]}       morpho [description]\n* @return {[type]}              [description]\n*/","meta":{"filename":"morpho.js","lineno":680,"columnno":2,"path":"","code":{}},"description":"[parseConjModel description]","scope":"static","access":"public","kind":"function","name":"parseConjModel","params":[{}],"returns":[{}],"longname":"parseConjModel"},{"comment":"/**\n* The tools module\n* @module Tools\n*/","meta":{"filename":"tools.js","lineno":1,"columnno":0,"path":"","code":{}},"description":"The tools module","kind":"module","name":"Tools","longname":"module:Tools"},{"comment":"/**\n* The tools class\n* @class Tools\n* @static\n*/","meta":{"filename":"tools.js","lineno":6,"columnno":1,"path":"","code":{}},"description":"The tools class","kind":"class","name":"Tools","scope":"static","longname":"module:Tools.Tools","memberof":"module:Tools"},{"comment":"/**\n* Read morse code and output as sound <br>\n* Example: readMorse(\"..-. .--   ..-.\");\n* @method readMorse\n* @param  {string} morse morse code written using \".\", \"-\" and blacks \" \".\n*/","meta":{"filename":"tools.js","lineno":12,"columnno":0,"path":"","code":{}},"description":"Read morse code and output as sound <br>\nExample: readMorse(\"..-. .--   ..-.\");","kind":"function","name":"readMorse","params":[{"type":{"names":["string"]},"description":"morse code written using \".\", \"-\" and blacks \" \".","name":"morse"}],"longname":"module:Tools~readMorse","scope":"inner","memberof":"module:Tools"},{"comment":"/**\n* Read morse code and output as sound <br>\n* Example: readMorse(\"..-. .--   ..-.\");\n* @method readMorse\n* @param  {string} morse morse code written using \".\", \"-\" and blacks \" \".\n*/","meta":{"range":[310,1313],"filename":"tools.js","lineno":18,"columnno":0,"path":"","code":{"id":"astnode100001860","name":"readMorse","type":"FunctionDeclaration","paramnames":["morse"]},"vars":{"dotLength":"module:Tools~readMorse~dotLength","AudioContext":"module:Tools~readMorse~AudioContext","context":"module:Tools~readMorse~context","gain":"module:Tools~readMorse~gain","osc":"module:Tools~readMorse~osc","gain.gain.value":"module:Tools~readMorse~gain.gain.value","osc.frequency.value":"module:Tools~readMorse~osc.frequency.value","i":"module:Tools~i","time0":"module:Tools~readMorse~time0","time":"module:Tools~time","char":"module:Tools~readMorse~char"}},"undocumented":true,"name":"readMorse","longname":"module:Tools~readMorse","kind":"function","scope":"inner","memberof":"module:Tools","params":[]},{"comment":"/**\n* Transform HTML reserved characters to their equivalent codes in HTML.<br>\n* for example: \"<\" is transformed to \"&lt;\".\n* @method htmlEntities\n* @param  {string} str normal string\n* @return {string}     skip string\n*/","meta":{"filename":"tools.js","lineno":61,"columnno":0,"path":"","code":{}},"description":"Transform HTML reserved characters to their equivalent codes in HTML.<br>\nfor example: \"<\" is transformed to \"&lt;\".","kind":"function","name":"htmlEntities","params":[{"type":{"names":["string"]},"description":"normal string","name":"str"}],"returns":[{"type":{"names":["string"]},"description":"skip string"}],"longname":"module:Tools~htmlEntities","scope":"inner","memberof":"module:Tools"},{"comment":"/**\n* Transform HTML reserved characters to their equivalent codes in HTML.<br>\n* for example: \"<\" is transformed to \"&lt;\".\n* @method htmlEntities\n* @param  {string} str normal string\n* @return {string}     skip string\n*/","meta":{"range":[1544,1754],"filename":"tools.js","lineno":68,"columnno":0,"path":"","code":{"id":"astnode100002049","name":"htmlEntities","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"result":"module:Tools~result"}},"undocumented":true,"name":"htmlEntities","longname":"module:Tools~htmlEntities","kind":"function","scope":"inner","memberof":"module:Tools","params":[]},{"comment":"/**\n* This function returns another function which do the transformation\n* @method getTransliterator\n* @private\n* @param  {array} srcTbl array which contains the source strings\n* @param  {array} dstTbl array which contains the destination strings\n* @return {function}        a function which takes a string and transforme it using\n* srcTbl and dstTbl\n*/","meta":{"filename":"trans.js","lineno":80,"columnno":1,"path":"","code":{}},"description":"This function returns another function which do the transformation","kind":"function","name":"getTransliterator","access":"private","params":[{"type":{"names":["array"]},"description":"array which contains the source strings","name":"srcTbl"},{"type":{"names":["array"]},"description":"array which contains the destination strings","name":"dstTbl"}],"returns":[{"type":{"names":["function"]},"description":"a function which takes a string and transforme it using\nsrcTbl and dstTbl"}],"longname":"getTransliterator","scope":"global"},{"comment":"/**\n* translateration of the language words\n* @class Trans\n* @module JsLingua\n* @constructor\n* @param {string} langCode the code of the language: ara, jpn, etc.\n*/","meta":{"filename":"trans.js","lineno":100,"columnno":1,"path":"","code":{}},"description":"translateration of the language words","kind":"class","classdesc":"Trans","name":"JsLingua","params":[{"type":{"names":["string"]},"description":"the code of the language: ara, jpn, etc.","name":"langCode"}],"longname":"JsLingua","scope":"global"},{"comment":"/**\n* Add new transliteration method using two parallele tables\n* @method newMethod\n* @protected\n* @static\n* @param  {string} methodName the name of the method\n* @param  {array} langTbl    array of strigs, the languages characters\n* @param  {array} transTbl   array of strigs, their respective representations\n*/","meta":{"filename":"trans.js","lineno":123,"columnno":1,"path":"","code":{}},"description":"Add new transliteration method using two parallele tables","kind":"function","name":"newMethod","access":"protected","scope":"static","params":[{"type":{"names":["string"]},"description":"the name of the method","name":"methodName"},{"type":{"names":["array"]},"description":"array of strigs, the languages characters","name":"langTbl"},{"type":{"names":["array"]},"description":"array of strigs, their respective representations","name":"transTbl"}],"longname":"newMethod"},{"comment":"/**\n* Set transliteration methods directly\n* @method setTransUntrasMethods\n* @protected\n* @static\n* @param {string} methodName the name of the method\n* @param {function} trans      function of transliteration\n* @param {function} untrans    function of untransliteration\n*/","meta":{"filename":"trans.js","lineno":148,"columnno":1,"path":"","code":{}},"description":"Set transliteration methods directly","kind":"function","name":"setTransUntrasMethods","access":"protected","scope":"static","params":[{"type":{"names":["string"]},"description":"the name of the method","name":"methodName"},{"type":{"names":["function"]},"description":"function of transliteration","name":"trans"},{"type":{"names":["function"]},"description":"function of untransliteration","name":"untrans"}],"longname":"setTransUntrasMethods"},{"comment":"/**\n* add pre- and post-transliteration functions to a method\n* @method addTransPrePostMethods\n* @protected\n* @static\n* @param {string} methodName the name of the method\n* @param {function} preFunc    function that executes before transliteration;\n* It takes a string and returns a string\n* @param {function} postFunc   function that executes after transliteration;\n* It takes a string and returns a string\n*/","meta":{"filename":"trans.js","lineno":171,"columnno":1,"path":"","code":{}},"description":"add pre- and post-transliteration functions to a method","kind":"function","name":"addTransPrePostMethods","access":"protected","scope":"static","params":[{"type":{"names":["string"]},"description":"the name of the method","name":"methodName"},{"type":{"names":["function"]},"description":"function that executes before transliteration;\nIt takes a string and returns a string","name":"preFunc"},{"type":{"names":["function"]},"description":"function that executes after transliteration;\nIt takes a string and returns a string","name":"postFunc"}],"longname":"addTransPrePostMethods"},{"comment":"/**\n* add pre- and post-untransliteration functions to a method\n* @method addUntransPrePostMethods\n* @protected\n* @static\n* @param {string} methodName the name of the method\n* @param {function} preFunc    function that executes before untransliteration;\n* It takes a string and returns a string\n* @param {function} postFunc   function that executes after untransliteration;\n* It takes a string and returns a string\n*/","meta":{"filename":"trans.js","lineno":193,"columnno":1,"path":"","code":{}},"description":"add pre- and post-untransliteration functions to a method","kind":"function","name":"addUntransPrePostMethods","access":"protected","scope":"static","params":[{"type":{"names":["string"]},"description":"the name of the method","name":"methodName"},{"type":{"names":["function"]},"description":"function that executes before untransliteration;\nIt takes a string and returns a string","name":"preFunc"},{"type":{"names":["function"]},"description":"function that executes after untransliteration;\nIt takes a string and returns a string","name":"postFunc"}],"longname":"addUntransPrePostMethods"},{"comment":"/**\n* Sets the current method to be used for [un]transliteration\n* @method setCurrentMethod\n* @param {string} methodName method's name\n*/","meta":{"filename":"trans.js","lineno":222,"columnno":1,"path":"","code":{}},"description":"Sets the current method to be used for [un]transliteration","kind":"function","name":"setCurrentMethod","params":[{"type":{"names":["string"]},"description":"method's name","name":"methodName"}],"longname":"setCurrentMethod","scope":"global"},{"comment":"/**\n* Returns the list of available transliteration methods\n* @method availableMethods\n* @return {array}  Array of Strings containing methods names\n*/","meta":{"filename":"trans.js","lineno":233,"columnno":1,"path":"","code":{}},"description":"Returns the list of available transliteration methods","kind":"function","name":"availableMethods","returns":[{"type":{"names":["array"]},"description":"Array of Strings containing methods names"}],"longname":"availableMethods","scope":"global"},{"comment":"/**\n* gets the language's code\n* @method getCode\n* @return {string}  the language's code\n*/","meta":{"filename":"trans.js","lineno":242,"columnno":1,"path":"","code":{}},"description":"gets the language's code","kind":"function","name":"getCode","returns":[{"type":{"names":["string"]},"description":"the language's code"}],"longname":"getCode","scope":"global"},{"comment":"/**\n* transliterate the text using the current method\n* @method transliterate\n* @param  {string} text the untransliterated text (original)\n* @return {string}      the transliterated text\n*/","meta":{"filename":"trans.js","lineno":251,"columnno":1,"path":"","code":{}},"description":"transliterate the text using the current method","kind":"function","name":"transliterate","params":[{"type":{"names":["string"]},"description":"the untransliterated text (original)","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"the transliterated text"}],"longname":"transliterate","scope":"global"},{"comment":"/**\n* untransliterate the text using the current method\n* @method untransliterate\n* @param  {string} text translaterated text\n* @return {string}      untranslaterated text (original text)\n*/","meta":{"filename":"trans.js","lineno":272,"columnno":1,"path":"","code":{}},"description":"untransliterate the text using the current method","kind":"function","name":"untransliterate","params":[{"type":{"names":["string"]},"description":"translaterated text","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"untranslaterated text (original text)"}],"longname":"untransliterate","scope":"global"},{"comment":"/**\n* Transform from Arabic numbers to Arabic letters\n* @method toArabicLetters\n* @private\n* @param {Number} nbr the integer number\n* @return {String} Arabic writing of numbers\n*/","meta":{"filename":"ara.lang.js","lineno":72,"columnno":2,"path":"/ara","code":{}},"description":"Transform from Arabic numbers to Arabic letters","kind":"function","name":"toArabicLetters","access":"private","params":[{"type":{"names":["Number"]},"description":"the integer number","name":"nbr"}],"returns":[{"type":{"names":["String"]},"description":"Arabic writing of numbers"}],"longname":"toArabicLetters","scope":"global"},{"comment":"/**\n* A function that gives the pronoun index in conjugation table\n* @method getPronounIndex\n* @param  {object}        opts contains person, number and gender\n* @return {number}             a number from 0 to 13\n*/","meta":{"filename":"ara.morpho.js","lineno":93,"columnno":2,"path":"/ara","code":{}},"description":"A function that gives the pronoun index in conjugation table","kind":"function","name":"getPronounIndex","params":[{"type":{"names":["object"]},"description":"contains person, number and gender","name":"opts"}],"returns":[{"type":{"names":["number"]},"description":"a number from 0 to 13"}],"longname":"getPronounIndex","scope":"global"},{"comment":"/**\n* Normalization method for Arabic: it helps delete vocalization\n* * voc: delete vocalization\n* * alef: Replace all alef variants with the simple alef\n* * yeh: Relace the alif maqsorah with yeh\n* * teh: Replace teh marbuta with heh\n* * _: Delete tatweel\n* @method normalize\n* @param  {string} word the word to be normalized\n* @param  {string} opts some options (optional) where each language defines its own\n* normalization options\n* @return {string}      normalized word\n**/","meta":{"filename":"ara.morpho.js","lineno":234,"columnno":2,"path":"/ara","code":{}},"description":"Normalization method for Arabic: it helps delete vocalization\n* voc: delete vocalization\n* alef: Replace all alef variants with the simple alef\n* yeh: Relace the alif maqsorah with yeh\n* teh: Replace teh marbuta with heh\n* _: Delete tatweel","kind":"function","name":"normalize","params":[{"type":{"names":["string"]},"description":"the word to be normalized","name":"word"},{"type":{"names":["string"]},"description":"some options (optional) where each language defines its own\nnormalization options","name":"opts"}],"returns":[{"type":{"names":["string"]},"description":"normalized word"}],"longname":"normalize","scope":"global"},{"comment":"/**\n* A method for Arabic stemming which aims to use regex as much as possible\n* @private\n* @static\n* @method jslinguaAraStemmer\n* @param  {[type]}          word [description]\n* @return {[type]}               [description]\n*/","meta":{"filename":"ara.morpho.js","lineno":288,"columnno":2,"path":"/ara","code":{}},"description":"A method for Arabic stemming which aims to use regex as much as possible","access":"private","scope":"static","kind":"function","name":"jslinguaAraStemmer","params":[{}],"returns":[{}],"longname":"jslinguaAraStemmer"},{"comment":"/**\n* Arabic to morse normalization\n* @method ar2morseNormalize\n* @private\n* @param  {string} text Arabic text\n* @return {string}      normalized text\n*/","meta":{"filename":"ara.trans.js","lineno":251,"columnno":2,"path":"/ara","code":{}},"description":"Arabic to morse normalization","kind":"function","name":"ar2morseNormalize","access":"private","params":[{"type":{"names":["string"]},"description":"Arabic text","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"normalized text"}],"longname":"ar2morseNormalize","scope":"global"},{"comment":"/**\n* pre-transliteration for morse: cleaning non supported codes\n* @method morsePreTrans\n* @private\n* @param  {string} text Arabic text\n* @return {string}      processed text for morse transliteration\n*/","meta":{"filename":"ara.trans.js","lineno":266,"columnno":2,"path":"/ara","code":{}},"description":"pre-transliteration for morse: cleaning non supported codes","kind":"function","name":"morsePreTrans","access":"private","params":[{"type":{"names":["string"]},"description":"Arabic text","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"processed text for morse transliteration"}],"longname":"morsePreTrans","scope":"global"},{"comment":"/**\n* post-transliteration for morse: clean non morse characters\n* @method morsePostTrans\n* @private\n* @param  {string} text morse code\n* @return {string}      filtered morse code\n*/","meta":{"filename":"ara.trans.js","lineno":284,"columnno":2,"path":"/ara","code":{}},"description":"post-transliteration for morse: clean non morse characters","kind":"function","name":"morsePostTrans","access":"private","params":[{"type":{"names":["string"]},"description":"morse code","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"filtered morse code"}],"longname":"morsePostTrans","scope":"global"},{"comment":"/**\n* pre-untransliteration for morse: clean non morse characters\n* @method morsePreUntrans\n* @private\n* @param  {string} text morse code\n* @return {string}      processed morse code for untransliteration\n*/","meta":{"filename":"ara.trans.js","lineno":303,"columnno":2,"path":"/ara","code":{}},"description":"pre-untransliteration for morse: clean non morse characters","kind":"function","name":"morsePreUntrans","access":"private","params":[{"type":{"names":["string"]},"description":"morse code","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"processed morse code for untransliteration"}],"longname":"morsePreUntrans","scope":"global"},{"comment":"/**\n* post-untransliteration for morse\n* @method morsePostUntrans\n* @private\n* @param  {string} text Arabic text\n* @return {string}      filtered Arabic text\n*/","meta":{"filename":"ara.trans.js","lineno":321,"columnno":2,"path":"/ara","code":{}},"description":"post-untransliteration for morse","kind":"function","name":"morsePostUntrans","access":"private","params":[{"type":{"names":["string"]},"description":"Arabic text","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"filtered Arabic text"}],"longname":"morsePostUntrans","scope":"global"}]}